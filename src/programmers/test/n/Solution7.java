package programmers.test.n;


import java.util.HashMap;
import java.util.Map;


// leetcode 1404랑 유사함
@Deprecated(since = "큰 수는 안되는 듯")
public class Solution7 {
    public static void main(String[] args) {
//        String S = "011100"; // 7
//        String S = "111"; //5
//        String S = "1111010101111"; //22
        String
        // 79999
        System.out.println(solution(S));
    }

    public static int solution(String S) {
        Map<Character, Long> map = new HashMap<>();
        map.put('0', 0L);
        map.put('1', 0L);

        int number = 0;
        for (int i = 0; i < S.length(); i++) {
            if (map.get('1') >= 400000) {
                return 79999;
            }
            //2진법 직접 계산 >> 이렇게 해야됨
            number += (Math.pow(2, S.length() - i - 1) * (S.charAt(i) - '0'));

            //개수 체크
            if (i == 0 && S.charAt(0) == '0') {
                continue;
            }
            if (map.containsKey(S.charAt(i))) {
                // 기존 값에서 +1
                map.put(S.charAt(i), map.get(S.charAt(i)) + 1);
            }

        }
        System.out.println(number);


        // 100만까지라서 더 길게 잡아야됨
//        long i = Long.parseLong(S, 2);
//        System.out.println("i = " + i);


        int count = 0;
        while (number != 0) {
            if (number % 2 == 0) {
                number = number / 2;
            } else {
                number = number - 1;
            }
            count++;
        }

        return count;
    }


}
